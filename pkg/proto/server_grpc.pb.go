// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.7
// source: pkg/proto/server.proto

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CorpLink_SetDomain_FullMethodName                = "/server.CorpLink/setDomain"
	CorpLink_SetCompanyInfo_FullMethodName           = "/server.CorpLink/setCompanyInfo"
	CorpLink_SetCookies_FullMethodName               = "/server.CorpLink/setCookies"
	CorpLink_GetVpnStatus_FullMethodName             = "/server.CorpLink/getVpnStatus"
	CorpLink_GetVpnList_FullMethodName               = "/server.CorpLink/getVpnList"
	CorpLink_ConnectVpn_FullMethodName               = "/server.CorpLink/connectVpn"
	CorpLink_ChangeVpnMode_FullMethodName            = "/server.CorpLink/changeVpnMode"
	CorpLink_DisconnectVpn_FullMethodName            = "/server.CorpLink/disconnectVpn"
	CorpLink_GetSetupInfo_FullMethodName             = "/server.CorpLink/getSetupInfo"
	CorpLink_Http_FullMethodName                     = "/server.CorpLink/http"
	CorpLink_CheckSecurityInfo_FullMethodName        = "/server.CorpLink/checkSecurityInfo"
	CorpLink_FixSecurityRisk_FullMethodName          = "/server.CorpLink/fixSecurityRisk"
	CorpLink_GetSecurityInfo_FullMethodName          = "/server.CorpLink/getSecurityInfo"
	CorpLink_SendFeedback_FullMethodName             = "/server.CorpLink/sendFeedback"
	CorpLink_Logout_FullMethodName                   = "/server.CorpLink/logout"
	CorpLink_Login_FullMethodName                    = "/server.CorpLink/login"
	CorpLink_StartNetworkDiagnose_FullMethodName     = "/server.CorpLink/startNetworkDiagnose"
	CorpLink_SetLanguage_FullMethodName              = "/server.CorpLink/setLanguage"
	CorpLink_ClientClose_FullMethodName              = "/server.CorpLink/clientClose"
	CorpLink_GetNetworkInfo_FullMethodName           = "/server.CorpLink/getNetworkInfo"
	CorpLink_GetServiceStatus_FullMethodName         = "/server.CorpLink/getServiceStatus"
	CorpLink_CheckSoftwareRisk_FullMethodName        = "/server.CorpLink/checkSoftwareRisk"
	CorpLink_GetSoftwareRisk_FullMethodName          = "/server.CorpLink/getSoftwareRisk"
	CorpLink_GetWiFiStatus_FullMethodName            = "/server.CorpLink/getWiFiStatus"
	CorpLink_ConnectWiFi_FullMethodName              = "/server.CorpLink/connectWiFi"
	CorpLink_DisconnectWiFi_FullMethodName           = "/server.CorpLink/disconnectWiFi"
	CorpLink_CheckProcessRisk_FullMethodName         = "/server.CorpLink/checkProcessRisk"
	CorpLink_GetProcessRisk_FullMethodName           = "/server.CorpLink/getProcessRisk"
	CorpLink_ConfigWiredNetwork_FullMethodName       = "/server.CorpLink/configWiredNetwork"
	CorpLink_GetNotification_FullMethodName          = "/server.CorpLink/getNotification"
	CorpLink_GetSecurityModuleInfo_FullMethodName    = "/server.CorpLink/getSecurityModuleInfo"
	CorpLink_GetDeviceRuntimeStats_FullMethodName    = "/server.CorpLink/getDeviceRuntimeStats"
	CorpLink_GetDeviceInfo_FullMethodName            = "/server.CorpLink/getDeviceInfo"
	CorpLink_SetDNS_FullMethodName                   = "/server.CorpLink/setDNS"
	CorpLink_GetDNSRecommend_FullMethodName          = "/server.CorpLink/getDNSRecommend"
	CorpLink_InstallSoftware_FullMethodName          = "/server.CorpLink/installSoftware"
	CorpLink_GetInstallTaskInfo_FullMethodName       = "/server.CorpLink/getInstallTaskInfo"
	CorpLink_GetInstalledSoftwareInfo_FullMethodName = "/server.CorpLink/getInstalledSoftwareInfo"
	CorpLink_CheckWiFiGuide_FullMethodName           = "/server.CorpLink/checkWiFiGuide"
	CorpLink_RemoveWiFi_FullMethodName               = "/server.CorpLink/removeWiFi"
)

// CorpLinkClient is the client API for CorpLink service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CorpLinkClient interface {
	SetDomain(ctx context.Context, in *SetDomainRequest, opts ...grpc.CallOption) (*CodeResponse, error)
	SetCompanyInfo(ctx context.Context, in *CompanyInfoRequest, opts ...grpc.CallOption) (*CodeResponse, error)
	SetCookies(ctx context.Context, in *SetCookiesRequest, opts ...grpc.CallOption) (*CodeResponse, error)
	GetVpnStatus(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*VpnStatusResponse, error)
	GetVpnList(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*VpnListResponse, error)
	ConnectVpn(ctx context.Context, in *ConnectVpnRequest, opts ...grpc.CallOption) (*CodeResponse, error)
	ChangeVpnMode(ctx context.Context, in *ChangeVpnModeRequest, opts ...grpc.CallOption) (*CodeResponse, error)
	DisconnectVpn(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CodeResponse, error)
	GetSetupInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*SetupResponse, error)
	Http(ctx context.Context, in *HttpRequest, opts ...grpc.CallOption) (*HttpResponse, error)
	CheckSecurityInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*SecurityResponse, error)
	FixSecurityRisk(ctx context.Context, in *SecurityFixRequest, opts ...grpc.CallOption) (*CodeResponse, error)
	GetSecurityInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*SecurityResponse, error)
	SendFeedback(ctx context.Context, in *FeedbackRequest, opts ...grpc.CallOption) (*CodeResponse, error)
	Logout(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CodeResponse, error)
	Login(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CodeResponse, error)
	StartNetworkDiagnose(ctx context.Context, in *DiagnoseRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DiagnoseItemInfo], error)
	SetLanguage(ctx context.Context, in *LanguageRequest, opts ...grpc.CallOption) (*CodeResponse, error)
	ClientClose(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CodeResponse, error)
	GetNetworkInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*NetworkInfoResponse, error)
	GetServiceStatus(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CodeResponse, error)
	CheckSoftwareRisk(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*SoftwareAlarmResponse, error)
	GetSoftwareRisk(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*SoftwareAlarmResponse, error)
	GetWiFiStatus(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*WiFiStatusResponse, error)
	ConnectWiFi(ctx context.Context, in *WiFiConnectRequest, opts ...grpc.CallOption) (*CodeResponse, error)
	DisconnectWiFi(ctx context.Context, in *WiFiDisconnectRequest, opts ...grpc.CallOption) (*CodeResponse, error)
	CheckProcessRisk(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ProcessAlarmResponse, error)
	GetProcessRisk(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ProcessAlarmResponse, error)
	ConfigWiredNetwork(ctx context.Context, in *ConfigWiredRequest, opts ...grpc.CallOption) (*CodeResponse, error)
	GetNotification(ctx context.Context, in *GetNotificationRequest, opts ...grpc.CallOption) (*NotificationResponse, error)
	GetSecurityModuleInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*SecurityModuleResponse, error)
	GetDeviceRuntimeStats(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DeviceRuntimeStats], error)
	GetDeviceInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*DeviceInfoResponse, error)
	SetDNS(ctx context.Context, in *SetDNSRequest, opts ...grpc.CallOption) (*CodeResponse, error)
	GetDNSRecommend(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*DNSRecommendResponse, error)
	InstallSoftware(ctx context.Context, in *InstallSoftwareRequest, opts ...grpc.CallOption) (*CodeResponse, error)
	GetInstallTaskInfo(ctx context.Context, in *GetInstallTaskInfoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[InstallTaskInfoResponse], error)
	GetInstalledSoftwareInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*InstalledSoftwareResponse, error)
	CheckWiFiGuide(ctx context.Context, in *CheckWiFiGuideRequest, opts ...grpc.CallOption) (*CodeResponse, error)
	RemoveWiFi(ctx context.Context, in *WiFiRemoveRequest, opts ...grpc.CallOption) (*CodeResponse, error)
}

type corpLinkClient struct {
	cc grpc.ClientConnInterface
}

func NewCorpLinkClient(cc grpc.ClientConnInterface) CorpLinkClient {
	return &corpLinkClient{cc}
}

func (c *corpLinkClient) SetDomain(ctx context.Context, in *SetDomainRequest, opts ...grpc.CallOption) (*CodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CodeResponse)
	err := c.cc.Invoke(ctx, CorpLink_SetDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) SetCompanyInfo(ctx context.Context, in *CompanyInfoRequest, opts ...grpc.CallOption) (*CodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CodeResponse)
	err := c.cc.Invoke(ctx, CorpLink_SetCompanyInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) SetCookies(ctx context.Context, in *SetCookiesRequest, opts ...grpc.CallOption) (*CodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CodeResponse)
	err := c.cc.Invoke(ctx, CorpLink_SetCookies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) GetVpnStatus(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*VpnStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnStatusResponse)
	err := c.cc.Invoke(ctx, CorpLink_GetVpnStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) GetVpnList(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*VpnListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnListResponse)
	err := c.cc.Invoke(ctx, CorpLink_GetVpnList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) ConnectVpn(ctx context.Context, in *ConnectVpnRequest, opts ...grpc.CallOption) (*CodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CodeResponse)
	err := c.cc.Invoke(ctx, CorpLink_ConnectVpn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) ChangeVpnMode(ctx context.Context, in *ChangeVpnModeRequest, opts ...grpc.CallOption) (*CodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CodeResponse)
	err := c.cc.Invoke(ctx, CorpLink_ChangeVpnMode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) DisconnectVpn(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CodeResponse)
	err := c.cc.Invoke(ctx, CorpLink_DisconnectVpn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) GetSetupInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*SetupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetupResponse)
	err := c.cc.Invoke(ctx, CorpLink_GetSetupInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) Http(ctx context.Context, in *HttpRequest, opts ...grpc.CallOption) (*HttpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HttpResponse)
	err := c.cc.Invoke(ctx, CorpLink_Http_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) CheckSecurityInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*SecurityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecurityResponse)
	err := c.cc.Invoke(ctx, CorpLink_CheckSecurityInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) FixSecurityRisk(ctx context.Context, in *SecurityFixRequest, opts ...grpc.CallOption) (*CodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CodeResponse)
	err := c.cc.Invoke(ctx, CorpLink_FixSecurityRisk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) GetSecurityInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*SecurityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecurityResponse)
	err := c.cc.Invoke(ctx, CorpLink_GetSecurityInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) SendFeedback(ctx context.Context, in *FeedbackRequest, opts ...grpc.CallOption) (*CodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CodeResponse)
	err := c.cc.Invoke(ctx, CorpLink_SendFeedback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) Logout(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CodeResponse)
	err := c.cc.Invoke(ctx, CorpLink_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) Login(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CodeResponse)
	err := c.cc.Invoke(ctx, CorpLink_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) StartNetworkDiagnose(ctx context.Context, in *DiagnoseRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DiagnoseItemInfo], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CorpLink_ServiceDesc.Streams[0], CorpLink_StartNetworkDiagnose_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DiagnoseRequest, DiagnoseItemInfo]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CorpLink_StartNetworkDiagnoseClient = grpc.ServerStreamingClient[DiagnoseItemInfo]

func (c *corpLinkClient) SetLanguage(ctx context.Context, in *LanguageRequest, opts ...grpc.CallOption) (*CodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CodeResponse)
	err := c.cc.Invoke(ctx, CorpLink_SetLanguage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) ClientClose(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CodeResponse)
	err := c.cc.Invoke(ctx, CorpLink_ClientClose_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) GetNetworkInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*NetworkInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkInfoResponse)
	err := c.cc.Invoke(ctx, CorpLink_GetNetworkInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) GetServiceStatus(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CodeResponse)
	err := c.cc.Invoke(ctx, CorpLink_GetServiceStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) CheckSoftwareRisk(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*SoftwareAlarmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SoftwareAlarmResponse)
	err := c.cc.Invoke(ctx, CorpLink_CheckSoftwareRisk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) GetSoftwareRisk(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*SoftwareAlarmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SoftwareAlarmResponse)
	err := c.cc.Invoke(ctx, CorpLink_GetSoftwareRisk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) GetWiFiStatus(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*WiFiStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WiFiStatusResponse)
	err := c.cc.Invoke(ctx, CorpLink_GetWiFiStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) ConnectWiFi(ctx context.Context, in *WiFiConnectRequest, opts ...grpc.CallOption) (*CodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CodeResponse)
	err := c.cc.Invoke(ctx, CorpLink_ConnectWiFi_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) DisconnectWiFi(ctx context.Context, in *WiFiDisconnectRequest, opts ...grpc.CallOption) (*CodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CodeResponse)
	err := c.cc.Invoke(ctx, CorpLink_DisconnectWiFi_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) CheckProcessRisk(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ProcessAlarmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessAlarmResponse)
	err := c.cc.Invoke(ctx, CorpLink_CheckProcessRisk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) GetProcessRisk(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ProcessAlarmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessAlarmResponse)
	err := c.cc.Invoke(ctx, CorpLink_GetProcessRisk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) ConfigWiredNetwork(ctx context.Context, in *ConfigWiredRequest, opts ...grpc.CallOption) (*CodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CodeResponse)
	err := c.cc.Invoke(ctx, CorpLink_ConfigWiredNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) GetNotification(ctx context.Context, in *GetNotificationRequest, opts ...grpc.CallOption) (*NotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotificationResponse)
	err := c.cc.Invoke(ctx, CorpLink_GetNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) GetSecurityModuleInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*SecurityModuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecurityModuleResponse)
	err := c.cc.Invoke(ctx, CorpLink_GetSecurityModuleInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) GetDeviceRuntimeStats(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DeviceRuntimeStats], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CorpLink_ServiceDesc.Streams[1], CorpLink_GetDeviceRuntimeStats_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EmptyRequest, DeviceRuntimeStats]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CorpLink_GetDeviceRuntimeStatsClient = grpc.ServerStreamingClient[DeviceRuntimeStats]

func (c *corpLinkClient) GetDeviceInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*DeviceInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceInfoResponse)
	err := c.cc.Invoke(ctx, CorpLink_GetDeviceInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) SetDNS(ctx context.Context, in *SetDNSRequest, opts ...grpc.CallOption) (*CodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CodeResponse)
	err := c.cc.Invoke(ctx, CorpLink_SetDNS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) GetDNSRecommend(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*DNSRecommendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DNSRecommendResponse)
	err := c.cc.Invoke(ctx, CorpLink_GetDNSRecommend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) InstallSoftware(ctx context.Context, in *InstallSoftwareRequest, opts ...grpc.CallOption) (*CodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CodeResponse)
	err := c.cc.Invoke(ctx, CorpLink_InstallSoftware_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) GetInstallTaskInfo(ctx context.Context, in *GetInstallTaskInfoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[InstallTaskInfoResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CorpLink_ServiceDesc.Streams[2], CorpLink_GetInstallTaskInfo_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetInstallTaskInfoRequest, InstallTaskInfoResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CorpLink_GetInstallTaskInfoClient = grpc.ServerStreamingClient[InstallTaskInfoResponse]

func (c *corpLinkClient) GetInstalledSoftwareInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*InstalledSoftwareResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InstalledSoftwareResponse)
	err := c.cc.Invoke(ctx, CorpLink_GetInstalledSoftwareInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) CheckWiFiGuide(ctx context.Context, in *CheckWiFiGuideRequest, opts ...grpc.CallOption) (*CodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CodeResponse)
	err := c.cc.Invoke(ctx, CorpLink_CheckWiFiGuide_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corpLinkClient) RemoveWiFi(ctx context.Context, in *WiFiRemoveRequest, opts ...grpc.CallOption) (*CodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CodeResponse)
	err := c.cc.Invoke(ctx, CorpLink_RemoveWiFi_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CorpLinkServer is the server API for CorpLink service.
// All implementations must embed UnimplementedCorpLinkServer
// for forward compatibility.
type CorpLinkServer interface {
	SetDomain(context.Context, *SetDomainRequest) (*CodeResponse, error)
	SetCompanyInfo(context.Context, *CompanyInfoRequest) (*CodeResponse, error)
	SetCookies(context.Context, *SetCookiesRequest) (*CodeResponse, error)
	GetVpnStatus(context.Context, *EmptyRequest) (*VpnStatusResponse, error)
	GetVpnList(context.Context, *EmptyRequest) (*VpnListResponse, error)
	ConnectVpn(context.Context, *ConnectVpnRequest) (*CodeResponse, error)
	ChangeVpnMode(context.Context, *ChangeVpnModeRequest) (*CodeResponse, error)
	DisconnectVpn(context.Context, *EmptyRequest) (*CodeResponse, error)
	GetSetupInfo(context.Context, *EmptyRequest) (*SetupResponse, error)
	Http(context.Context, *HttpRequest) (*HttpResponse, error)
	CheckSecurityInfo(context.Context, *EmptyRequest) (*SecurityResponse, error)
	FixSecurityRisk(context.Context, *SecurityFixRequest) (*CodeResponse, error)
	GetSecurityInfo(context.Context, *EmptyRequest) (*SecurityResponse, error)
	SendFeedback(context.Context, *FeedbackRequest) (*CodeResponse, error)
	Logout(context.Context, *EmptyRequest) (*CodeResponse, error)
	Login(context.Context, *EmptyRequest) (*CodeResponse, error)
	StartNetworkDiagnose(*DiagnoseRequest, grpc.ServerStreamingServer[DiagnoseItemInfo]) error
	SetLanguage(context.Context, *LanguageRequest) (*CodeResponse, error)
	ClientClose(context.Context, *EmptyRequest) (*CodeResponse, error)
	GetNetworkInfo(context.Context, *EmptyRequest) (*NetworkInfoResponse, error)
	GetServiceStatus(context.Context, *EmptyRequest) (*CodeResponse, error)
	CheckSoftwareRisk(context.Context, *EmptyRequest) (*SoftwareAlarmResponse, error)
	GetSoftwareRisk(context.Context, *EmptyRequest) (*SoftwareAlarmResponse, error)
	GetWiFiStatus(context.Context, *EmptyRequest) (*WiFiStatusResponse, error)
	ConnectWiFi(context.Context, *WiFiConnectRequest) (*CodeResponse, error)
	DisconnectWiFi(context.Context, *WiFiDisconnectRequest) (*CodeResponse, error)
	CheckProcessRisk(context.Context, *EmptyRequest) (*ProcessAlarmResponse, error)
	GetProcessRisk(context.Context, *EmptyRequest) (*ProcessAlarmResponse, error)
	ConfigWiredNetwork(context.Context, *ConfigWiredRequest) (*CodeResponse, error)
	GetNotification(context.Context, *GetNotificationRequest) (*NotificationResponse, error)
	GetSecurityModuleInfo(context.Context, *EmptyRequest) (*SecurityModuleResponse, error)
	GetDeviceRuntimeStats(*EmptyRequest, grpc.ServerStreamingServer[DeviceRuntimeStats]) error
	GetDeviceInfo(context.Context, *EmptyRequest) (*DeviceInfoResponse, error)
	SetDNS(context.Context, *SetDNSRequest) (*CodeResponse, error)
	GetDNSRecommend(context.Context, *EmptyRequest) (*DNSRecommendResponse, error)
	InstallSoftware(context.Context, *InstallSoftwareRequest) (*CodeResponse, error)
	GetInstallTaskInfo(*GetInstallTaskInfoRequest, grpc.ServerStreamingServer[InstallTaskInfoResponse]) error
	GetInstalledSoftwareInfo(context.Context, *EmptyRequest) (*InstalledSoftwareResponse, error)
	CheckWiFiGuide(context.Context, *CheckWiFiGuideRequest) (*CodeResponse, error)
	RemoveWiFi(context.Context, *WiFiRemoveRequest) (*CodeResponse, error)
	mustEmbedUnimplementedCorpLinkServer()
}

// UnimplementedCorpLinkServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCorpLinkServer struct{}

func (UnimplementedCorpLinkServer) SetDomain(context.Context, *SetDomainRequest) (*CodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDomain not implemented")
}
func (UnimplementedCorpLinkServer) SetCompanyInfo(context.Context, *CompanyInfoRequest) (*CodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCompanyInfo not implemented")
}
func (UnimplementedCorpLinkServer) SetCookies(context.Context, *SetCookiesRequest) (*CodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCookies not implemented")
}
func (UnimplementedCorpLinkServer) GetVpnStatus(context.Context, *EmptyRequest) (*VpnStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVpnStatus not implemented")
}
func (UnimplementedCorpLinkServer) GetVpnList(context.Context, *EmptyRequest) (*VpnListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVpnList not implemented")
}
func (UnimplementedCorpLinkServer) ConnectVpn(context.Context, *ConnectVpnRequest) (*CodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectVpn not implemented")
}
func (UnimplementedCorpLinkServer) ChangeVpnMode(context.Context, *ChangeVpnModeRequest) (*CodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeVpnMode not implemented")
}
func (UnimplementedCorpLinkServer) DisconnectVpn(context.Context, *EmptyRequest) (*CodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectVpn not implemented")
}
func (UnimplementedCorpLinkServer) GetSetupInfo(context.Context, *EmptyRequest) (*SetupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSetupInfo not implemented")
}
func (UnimplementedCorpLinkServer) Http(context.Context, *HttpRequest) (*HttpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Http not implemented")
}
func (UnimplementedCorpLinkServer) CheckSecurityInfo(context.Context, *EmptyRequest) (*SecurityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSecurityInfo not implemented")
}
func (UnimplementedCorpLinkServer) FixSecurityRisk(context.Context, *SecurityFixRequest) (*CodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FixSecurityRisk not implemented")
}
func (UnimplementedCorpLinkServer) GetSecurityInfo(context.Context, *EmptyRequest) (*SecurityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecurityInfo not implemented")
}
func (UnimplementedCorpLinkServer) SendFeedback(context.Context, *FeedbackRequest) (*CodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFeedback not implemented")
}
func (UnimplementedCorpLinkServer) Logout(context.Context, *EmptyRequest) (*CodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedCorpLinkServer) Login(context.Context, *EmptyRequest) (*CodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedCorpLinkServer) StartNetworkDiagnose(*DiagnoseRequest, grpc.ServerStreamingServer[DiagnoseItemInfo]) error {
	return status.Errorf(codes.Unimplemented, "method StartNetworkDiagnose not implemented")
}
func (UnimplementedCorpLinkServer) SetLanguage(context.Context, *LanguageRequest) (*CodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLanguage not implemented")
}
func (UnimplementedCorpLinkServer) ClientClose(context.Context, *EmptyRequest) (*CodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientClose not implemented")
}
func (UnimplementedCorpLinkServer) GetNetworkInfo(context.Context, *EmptyRequest) (*NetworkInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkInfo not implemented")
}
func (UnimplementedCorpLinkServer) GetServiceStatus(context.Context, *EmptyRequest) (*CodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceStatus not implemented")
}
func (UnimplementedCorpLinkServer) CheckSoftwareRisk(context.Context, *EmptyRequest) (*SoftwareAlarmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSoftwareRisk not implemented")
}
func (UnimplementedCorpLinkServer) GetSoftwareRisk(context.Context, *EmptyRequest) (*SoftwareAlarmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoftwareRisk not implemented")
}
func (UnimplementedCorpLinkServer) GetWiFiStatus(context.Context, *EmptyRequest) (*WiFiStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWiFiStatus not implemented")
}
func (UnimplementedCorpLinkServer) ConnectWiFi(context.Context, *WiFiConnectRequest) (*CodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectWiFi not implemented")
}
func (UnimplementedCorpLinkServer) DisconnectWiFi(context.Context, *WiFiDisconnectRequest) (*CodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectWiFi not implemented")
}
func (UnimplementedCorpLinkServer) CheckProcessRisk(context.Context, *EmptyRequest) (*ProcessAlarmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckProcessRisk not implemented")
}
func (UnimplementedCorpLinkServer) GetProcessRisk(context.Context, *EmptyRequest) (*ProcessAlarmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessRisk not implemented")
}
func (UnimplementedCorpLinkServer) ConfigWiredNetwork(context.Context, *ConfigWiredRequest) (*CodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigWiredNetwork not implemented")
}
func (UnimplementedCorpLinkServer) GetNotification(context.Context, *GetNotificationRequest) (*NotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotification not implemented")
}
func (UnimplementedCorpLinkServer) GetSecurityModuleInfo(context.Context, *EmptyRequest) (*SecurityModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecurityModuleInfo not implemented")
}
func (UnimplementedCorpLinkServer) GetDeviceRuntimeStats(*EmptyRequest, grpc.ServerStreamingServer[DeviceRuntimeStats]) error {
	return status.Errorf(codes.Unimplemented, "method GetDeviceRuntimeStats not implemented")
}
func (UnimplementedCorpLinkServer) GetDeviceInfo(context.Context, *EmptyRequest) (*DeviceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceInfo not implemented")
}
func (UnimplementedCorpLinkServer) SetDNS(context.Context, *SetDNSRequest) (*CodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDNS not implemented")
}
func (UnimplementedCorpLinkServer) GetDNSRecommend(context.Context, *EmptyRequest) (*DNSRecommendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDNSRecommend not implemented")
}
func (UnimplementedCorpLinkServer) InstallSoftware(context.Context, *InstallSoftwareRequest) (*CodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallSoftware not implemented")
}
func (UnimplementedCorpLinkServer) GetInstallTaskInfo(*GetInstallTaskInfoRequest, grpc.ServerStreamingServer[InstallTaskInfoResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetInstallTaskInfo not implemented")
}
func (UnimplementedCorpLinkServer) GetInstalledSoftwareInfo(context.Context, *EmptyRequest) (*InstalledSoftwareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstalledSoftwareInfo not implemented")
}
func (UnimplementedCorpLinkServer) CheckWiFiGuide(context.Context, *CheckWiFiGuideRequest) (*CodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckWiFiGuide not implemented")
}
func (UnimplementedCorpLinkServer) RemoveWiFi(context.Context, *WiFiRemoveRequest) (*CodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWiFi not implemented")
}
func (UnimplementedCorpLinkServer) mustEmbedUnimplementedCorpLinkServer() {}
func (UnimplementedCorpLinkServer) testEmbeddedByValue()                  {}

// UnsafeCorpLinkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CorpLinkServer will
// result in compilation errors.
type UnsafeCorpLinkServer interface {
	mustEmbedUnimplementedCorpLinkServer()
}

func RegisterCorpLinkServer(s grpc.ServiceRegistrar, srv CorpLinkServer) {
	// If the following call pancis, it indicates UnimplementedCorpLinkServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CorpLink_ServiceDesc, srv)
}

func _CorpLink_SetDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).SetDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_SetDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).SetDomain(ctx, req.(*SetDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_SetCompanyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).SetCompanyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_SetCompanyInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).SetCompanyInfo(ctx, req.(*CompanyInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_SetCookies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCookiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).SetCookies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_SetCookies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).SetCookies(ctx, req.(*SetCookiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_GetVpnStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).GetVpnStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_GetVpnStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).GetVpnStatus(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_GetVpnList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).GetVpnList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_GetVpnList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).GetVpnList(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_ConnectVpn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectVpnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).ConnectVpn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_ConnectVpn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).ConnectVpn(ctx, req.(*ConnectVpnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_ChangeVpnMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeVpnModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).ChangeVpnMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_ChangeVpnMode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).ChangeVpnMode(ctx, req.(*ChangeVpnModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_DisconnectVpn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).DisconnectVpn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_DisconnectVpn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).DisconnectVpn(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_GetSetupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).GetSetupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_GetSetupInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).GetSetupInfo(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_Http_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HttpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).Http(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_Http_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).Http(ctx, req.(*HttpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_CheckSecurityInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).CheckSecurityInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_CheckSecurityInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).CheckSecurityInfo(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_FixSecurityRisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityFixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).FixSecurityRisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_FixSecurityRisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).FixSecurityRisk(ctx, req.(*SecurityFixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_GetSecurityInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).GetSecurityInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_GetSecurityInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).GetSecurityInfo(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_SendFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).SendFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_SendFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).SendFeedback(ctx, req.(*FeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).Logout(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).Login(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_StartNetworkDiagnose_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DiagnoseRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CorpLinkServer).StartNetworkDiagnose(m, &grpc.GenericServerStream[DiagnoseRequest, DiagnoseItemInfo]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CorpLink_StartNetworkDiagnoseServer = grpc.ServerStreamingServer[DiagnoseItemInfo]

func _CorpLink_SetLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).SetLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_SetLanguage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).SetLanguage(ctx, req.(*LanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_ClientClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).ClientClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_ClientClose_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).ClientClose(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_GetNetworkInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).GetNetworkInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_GetNetworkInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).GetNetworkInfo(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_GetServiceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).GetServiceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_GetServiceStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).GetServiceStatus(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_CheckSoftwareRisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).CheckSoftwareRisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_CheckSoftwareRisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).CheckSoftwareRisk(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_GetSoftwareRisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).GetSoftwareRisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_GetSoftwareRisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).GetSoftwareRisk(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_GetWiFiStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).GetWiFiStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_GetWiFiStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).GetWiFiStatus(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_ConnectWiFi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WiFiConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).ConnectWiFi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_ConnectWiFi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).ConnectWiFi(ctx, req.(*WiFiConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_DisconnectWiFi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WiFiDisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).DisconnectWiFi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_DisconnectWiFi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).DisconnectWiFi(ctx, req.(*WiFiDisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_CheckProcessRisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).CheckProcessRisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_CheckProcessRisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).CheckProcessRisk(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_GetProcessRisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).GetProcessRisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_GetProcessRisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).GetProcessRisk(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_ConfigWiredNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigWiredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).ConfigWiredNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_ConfigWiredNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).ConfigWiredNetwork(ctx, req.(*ConfigWiredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_GetNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).GetNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_GetNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).GetNotification(ctx, req.(*GetNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_GetSecurityModuleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).GetSecurityModuleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_GetSecurityModuleInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).GetSecurityModuleInfo(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_GetDeviceRuntimeStats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CorpLinkServer).GetDeviceRuntimeStats(m, &grpc.GenericServerStream[EmptyRequest, DeviceRuntimeStats]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CorpLink_GetDeviceRuntimeStatsServer = grpc.ServerStreamingServer[DeviceRuntimeStats]

func _CorpLink_GetDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).GetDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_GetDeviceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).GetDeviceInfo(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_SetDNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDNSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).SetDNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_SetDNS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).SetDNS(ctx, req.(*SetDNSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_GetDNSRecommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).GetDNSRecommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_GetDNSRecommend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).GetDNSRecommend(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_InstallSoftware_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallSoftwareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).InstallSoftware(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_InstallSoftware_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).InstallSoftware(ctx, req.(*InstallSoftwareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_GetInstallTaskInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetInstallTaskInfoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CorpLinkServer).GetInstallTaskInfo(m, &grpc.GenericServerStream[GetInstallTaskInfoRequest, InstallTaskInfoResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CorpLink_GetInstallTaskInfoServer = grpc.ServerStreamingServer[InstallTaskInfoResponse]

func _CorpLink_GetInstalledSoftwareInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).GetInstalledSoftwareInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_GetInstalledSoftwareInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).GetInstalledSoftwareInfo(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_CheckWiFiGuide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckWiFiGuideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).CheckWiFiGuide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_CheckWiFiGuide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).CheckWiFiGuide(ctx, req.(*CheckWiFiGuideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorpLink_RemoveWiFi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WiFiRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorpLinkServer).RemoveWiFi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorpLink_RemoveWiFi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorpLinkServer).RemoveWiFi(ctx, req.(*WiFiRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CorpLink_ServiceDesc is the grpc.ServiceDesc for CorpLink service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CorpLink_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.CorpLink",
	HandlerType: (*CorpLinkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "setDomain",
			Handler:    _CorpLink_SetDomain_Handler,
		},
		{
			MethodName: "setCompanyInfo",
			Handler:    _CorpLink_SetCompanyInfo_Handler,
		},
		{
			MethodName: "setCookies",
			Handler:    _CorpLink_SetCookies_Handler,
		},
		{
			MethodName: "getVpnStatus",
			Handler:    _CorpLink_GetVpnStatus_Handler,
		},
		{
			MethodName: "getVpnList",
			Handler:    _CorpLink_GetVpnList_Handler,
		},
		{
			MethodName: "connectVpn",
			Handler:    _CorpLink_ConnectVpn_Handler,
		},
		{
			MethodName: "changeVpnMode",
			Handler:    _CorpLink_ChangeVpnMode_Handler,
		},
		{
			MethodName: "disconnectVpn",
			Handler:    _CorpLink_DisconnectVpn_Handler,
		},
		{
			MethodName: "getSetupInfo",
			Handler:    _CorpLink_GetSetupInfo_Handler,
		},
		{
			MethodName: "http",
			Handler:    _CorpLink_Http_Handler,
		},
		{
			MethodName: "checkSecurityInfo",
			Handler:    _CorpLink_CheckSecurityInfo_Handler,
		},
		{
			MethodName: "fixSecurityRisk",
			Handler:    _CorpLink_FixSecurityRisk_Handler,
		},
		{
			MethodName: "getSecurityInfo",
			Handler:    _CorpLink_GetSecurityInfo_Handler,
		},
		{
			MethodName: "sendFeedback",
			Handler:    _CorpLink_SendFeedback_Handler,
		},
		{
			MethodName: "logout",
			Handler:    _CorpLink_Logout_Handler,
		},
		{
			MethodName: "login",
			Handler:    _CorpLink_Login_Handler,
		},
		{
			MethodName: "setLanguage",
			Handler:    _CorpLink_SetLanguage_Handler,
		},
		{
			MethodName: "clientClose",
			Handler:    _CorpLink_ClientClose_Handler,
		},
		{
			MethodName: "getNetworkInfo",
			Handler:    _CorpLink_GetNetworkInfo_Handler,
		},
		{
			MethodName: "getServiceStatus",
			Handler:    _CorpLink_GetServiceStatus_Handler,
		},
		{
			MethodName: "checkSoftwareRisk",
			Handler:    _CorpLink_CheckSoftwareRisk_Handler,
		},
		{
			MethodName: "getSoftwareRisk",
			Handler:    _CorpLink_GetSoftwareRisk_Handler,
		},
		{
			MethodName: "getWiFiStatus",
			Handler:    _CorpLink_GetWiFiStatus_Handler,
		},
		{
			MethodName: "connectWiFi",
			Handler:    _CorpLink_ConnectWiFi_Handler,
		},
		{
			MethodName: "disconnectWiFi",
			Handler:    _CorpLink_DisconnectWiFi_Handler,
		},
		{
			MethodName: "checkProcessRisk",
			Handler:    _CorpLink_CheckProcessRisk_Handler,
		},
		{
			MethodName: "getProcessRisk",
			Handler:    _CorpLink_GetProcessRisk_Handler,
		},
		{
			MethodName: "configWiredNetwork",
			Handler:    _CorpLink_ConfigWiredNetwork_Handler,
		},
		{
			MethodName: "getNotification",
			Handler:    _CorpLink_GetNotification_Handler,
		},
		{
			MethodName: "getSecurityModuleInfo",
			Handler:    _CorpLink_GetSecurityModuleInfo_Handler,
		},
		{
			MethodName: "getDeviceInfo",
			Handler:    _CorpLink_GetDeviceInfo_Handler,
		},
		{
			MethodName: "setDNS",
			Handler:    _CorpLink_SetDNS_Handler,
		},
		{
			MethodName: "getDNSRecommend",
			Handler:    _CorpLink_GetDNSRecommend_Handler,
		},
		{
			MethodName: "installSoftware",
			Handler:    _CorpLink_InstallSoftware_Handler,
		},
		{
			MethodName: "getInstalledSoftwareInfo",
			Handler:    _CorpLink_GetInstalledSoftwareInfo_Handler,
		},
		{
			MethodName: "checkWiFiGuide",
			Handler:    _CorpLink_CheckWiFiGuide_Handler,
		},
		{
			MethodName: "removeWiFi",
			Handler:    _CorpLink_RemoveWiFi_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "startNetworkDiagnose",
			Handler:       _CorpLink_StartNetworkDiagnose_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getDeviceRuntimeStats",
			Handler:       _CorpLink_GetDeviceRuntimeStats_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getInstallTaskInfo",
			Handler:       _CorpLink_GetInstallTaskInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/proto/server.proto",
}
